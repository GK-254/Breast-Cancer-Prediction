# Import necessary libraries
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.ensemble import RandomForestClassifier
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import confusion_matrix, classification_report, roc_curve

# Load dataset
data = pd.read_csv('breast_cancer_data.csv')

# Exploratory Data Analysis (EDA)
print(data.head())
print(data.describe())
print(data.info())
print(data.isnull().sum())
sns.countplot(x='diagnosis', data=data)

# Preprocess data
data.drop(['id', 'Unnamed: 32'], axis=1, inplace=True)
data['diagnosis'] = data['diagnosis'].map({'M': 1, 'B': 0})
X = data.drop('diagnosis', axis=1)
y = data['diagnosis']
scaler = StandardScaler()
X = scaler.fit_transform(X)
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)

# Train models
lr = LogisticRegression(random_state=42)
rf = RandomForestClassifier(random_state=42)
lr.fit(X_train, y_train)
rf.fit(X_train, y_train)

# Evaluate models
def evaluate(model):
    y_pred = model.predict(X_test)
    print('Confusion Matrix:\n', confusion_matrix(y_test, y_pred))
    print('Classification Report:\n', classification_report(y_test, y_pred))
    fpr, tpr, thresholds = roc_curve(y_test, model.predict_proba(X_test)[:,1])
    plt.plot(fpr, tpr)
    plt.xlabel('False Positive Rate')
    plt.ylabel('True Positive Rate')
    plt.title('ROC Curve')
    plt.show()

evaluate(lr)
evaluate(rf)

# Select best model
best_model = lr

# Predict new data
new_data = pd.read_csv('new_data.csv')
new_data.drop(['id', 'Unnamed: 32'], axis=1, inplace=True)
new_data = scaler.transform(new_data)
predictions = best_model.predict(new_data)
print(predictions)
